.nolist
#include "ti83plus.inc"
.list
.org userMem-2
.db $BB,$6D
start:
   bcall(_ClrLCDFull)
   ld hl, 0
   ld (CurCol), hl
   ld (CurRow), hl
   ld hl, inputText1
   bcall(_PutS)
   bcall(_NewLine)
   ld hl, 0
   ld (state), HL ; Used to store whether the first or second number is being inputted
   call numberSelection
   
   bcall(_ClrLCDFull)
   ld hl, 0
   ld (CurRow), hl
   ld hl, inputText2
   bcall(_PutS)
   bcall(_NewLine)
   ld hl, 1
   ld (state), HL ; Used to store whether the first or second number is being inputted
   ld hl, 0
   call numberSelection
   
   ld hl, (num1)
   ld a, l
   ld hl, (num2)
   add a, l ; The actual addition
   ld h, 0
   ld l, a
   push hl
   bcall(_ClrLCDFull)
   ld hl, 0
   ld (CurRow), hl ; Zeros out both CurRow and CurCol
   ld hl, answer
   bcall(_PutS)
   bcall(_NewLine)
   pop hl
   bcall(_DispHL) ; Displays final answer
   ld a, 3
   ld (CurRow), a
   ld a, 0
   ld (CurCol), a
   ld hl, exitPrompt
   bcall(_PutS)
   bcall(_getKey)
   ret
numberSelection:
   push hl ; Preserves HL
   bcall(_DispHL)
   bcall(_GetKey)
   cp kUp
   jr z, increase
   cp kDown
   jr Z, decrease
   cp kEnter
   jr Z, determine
   ld hl, 0
   ld (CurCol), hl
   pop hl
   jr numberSelection

increase:
   ld hl, 0
   ld (CurCol), hl
   pop hl
   ld a, l
   push hl
   ld hl, 1
   add a, l
   pop hl
   ld l, a
   jr numberSelection
   
decrease:
   ld hl, 0
   ld (CurCol), hl
   pop hl
   ld a, l
   push hl
   ld hl, 1
   sub a, l
   pop hl
   ld l, a
   jr numberSelection

determine:
   ld hl, (state)
   ld a, l
   cp 0
   jr Z, putHLInVarNum1
   jr putHLInVarNum2
putHLInVarNum1:
   pop hl
   ld (num1), hl
   ret

putHLInVarNum2:
   pop hl
   ld (num2), hl
   ret  
inputText1:
    .db "INPT NUM 1: ",0
inputText2:
    .db "INPT NUM 2: ",0
answer:
   .db "ANSWER: ",0
exitPrompt:
   .db "PRESS ANY TO EXT",0
num1:
   .equ $8000
num2:
   .equ $8002
state:
   .equ $8004
